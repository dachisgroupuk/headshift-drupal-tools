<?php

function headshift_tools_create_edit_link($node)
{
	$type = $node->type;
  global $user;
  if ($node->nid && (user_access("edit any $type content") 
      || (user_access("edit own $type content") && $user->uid == $node->uid)
      || user_access('administer nodes')))
  {
    return "<span class='edit'>" . l('edit', "node/" . $node->nid . "/edit", array('query' => "destination=node/". $node->nid)) . "</span>";
  }
}

function headshift_tools_create_delete_link($node)
{
	$type = $node->type;
  global $user;
  if ($node->nid && (user_access("delete any $type content") 
      || (user_access("delete own $type content") && $user->uid == $node->uid)
      || user_access('administer nodes')))
  {
    return "<span class='delete'>" . l('delete', "node/" . $node->nid . "/delete") . "</span>";
  }
}

function headshift_tools_get_tid($vocabulary_name, $term_name)
{
  $trimmed_term_name = trim($term_name);
  $term_rows = headshift_tools_get_taxonomy_term($vocabulary_name, $trimmed_term_name);

  if($term_rows[0]->tid) {
      return $term_rows[0]->tid;
  }
}

function headshift_tools_get_or_create_tid($vocabulary_name, $term_name)
{
  $trimmed_term_name = trim($term_name);
  $term_rows = headshift_tools_get_taxonomy_term($vocabulary_name, $trimmed_term_name);

  if($term_rows === false) {
    //No term was found, create it
    $vid = headshift_tools_get_vid($vocabulary_name);
    if ($vid) {
        $edit = array('vid'=>$vid, 'name'=>$trimmed_term_name);
        taxonomy_save_term($edit);
        $term = headshift_tools_get_taxonomy_term($vocabulary_name, $trimmed_term_name);
    }
  }

  if($term_rows[0]->tid) {
      return $term_rows[0]->tid;
  }
}


function headshift_tools_get_vid($vocabulary) {
    $vid = db_result(db_query('SELECT v.vid
                FROM vocabulary v
                WHERE LOWER( v.name ) = "%s"', strtolower($vocabulary)));
    if(!$vid)
        return false;
    return $vid;
}

function headshift_tools_get_taxonomy_term($vocabulary_name, $term_name) {
    $db_result = db_query('SELECT t.tid, t . *
                FROM term_data t
                LEFT JOIN vocabulary v ON v.vid = t.vid
                WHERE LOWER( v.name ) = "%s"
                AND LOWER( t.name ) = "%s"', strtolower($vocabulary_name),strtolower($term_name));

    $result = array();
    while ($term = db_fetch_object($db_result)) {
        $result[] = $term;
    }
    if(count($result)==0)
        return false;

    return $result;
}


function headshift_tools_terms_to_tids($vocabulary_name, $terms)
{
  $tids = array();
  if($terms) {
    if (!is_array($terms))
    {
      $terms = explode(",", $terms);
    }
    foreach($terms as $term) {
      $tids[] = headshift_tools_get_or_create_tid($vocabulary_name, $term);
    }
  }
  return $tids;
}

function headshift_tools_theme_user_picture_with_size($account, $size) {
    // set the correct preset
    $preset = imagecache_preset_by_name($size);
    $account->imagecache_preset = $preset['presetid'];
    return theme('user_picture', $account);
}


/**
 *
 * @flatten multi-dimensional array
 * This method was taken from http://www.phpro.org/examples/Flatten-Array.html
 * A less efficient but simpler method is used in content_array_flatten
 * 
 * @param array $array
 *
 * @return array
 *
 */
function headshift_tools_flatten_array($array=array()){
  $ret_array = array();
  if (is_array($array))
  {
    foreach(new RecursiveIteratorIterator(new RecursiveArrayIterator($array)) as $value)
    {
      $ret_array[] = $value;
    }
  }
  return $ret_array;
}

// TODO - rename the following functions to start with headshift_tools

function str_replace_assoc($array,$string) {
    $from_array = array();
    $to_array = array();

    foreach ($array as $k => $v) {
        $from_array[] = $k;
        $to_array[] = $v;
    }

    return str_replace($from_array,$to_array,$string);
}

function headshift_tools_time_created_ago($node)
{
  if (is_numeric($node))
  {
    $node = node_load($nid);
  }
  // Convert the created date into a DateTime object
  $created_datetime = new DateTime("@{$node->created}");
  return date_format_interval($created_datetime);
}

function headshift_tools_current_user_in_role($role) {
  global $user;
  return in_array($role, array_values($user->roles));
}

function headshift_tools_user_in_role($uid, $role) {
    $user_to_check = user_load(array('uid' => $uid));
    return in_array($role, array_values($user_to_check->roles));
    //echo $user_to_check->username . ($is_in_role ? "is" : "is not") . " a " . $role ;
}

// This is the suggested refactoring of headshift_tools_current_user_in_role and headshift_tools_user_in_role
// function headshift_tools_user_in_role($role, $account) {
//   if (is_null($account))
//   {
//     global $user;
//     $account = $user;
//   }
//   else if (is_numeric($account))
//   {
//     $account = user_load(array('uid' => $account));
//   }
//   return in_array($role, array_values($account->roles));
// }


/**
 * Returns the action for the current page. i.e. "view", "add", "edit" or "delete"
 */
function headshift_tools_get_page_action() {
  $args = arg();

  if ($args[0]=="node" && ($args[2]=="edit" || $args[2]=="delete")) {
    return $args[2];
  }
  
  if ($args[0]=="node" && $args[1]=="add") {
    return "add";
  }

  return "view";
}

function headshift_tools_get_clean_args() {
  $url = drupal_get_path_alias($_GET['q']);
  return explode("/", $url);
}

function headshift_tools_cssify($item) {
  //TODO - implement this function properly..
  return str_replace('_', '-', $item);
}

function headshift_tools_body_label($node) {
  return $node->content['#content_extra_fields']['body_field']['label'];
}

function headshift_tools_cck_title($node, $field_name) {
  return $node->content[$field_name]['field']['#title'];
}

/**
 * Implementation of hook_theme().
 */
function headshift_tools_theme() {
  return array(
    'cck_item_list' => array(
      'arguments' => array('field' => NULL),
    ),
    'tag_item_list' => array(
      'arguments' => array('tags' => NULL),
    ),
  );
}

function theme_cck_item_list($field) {
  // Convert the CCK field structure into one suitable for theme('item_list')
  $items = array();
  foreach($field as $field_item)
  {
    if ($field_item['view']) { $items[] = $field_item['view']; }
  }
  return theme('item_list', $items);
}

function headshift_tools_group_taxonomy_by_vid($taxonomy) {
  $grouped_tags = array();
  foreach ($taxonomy as $term)
  {
    $grouped_tags[$term->vid][] = $term;
  }
  return $grouped_tags;
}

/**
 * Takes a node, and returns all the terms in a given vocabulary
 * The format of the $taxonomy array can vary depending on the state of the node.
 * If the node is just being created, then it may just be an array of tids.
 * In this situation, lookups will be required to determine which tids are in the given vocabulary
 * If the node already exists, then most likely it is an array of term objects, in which
 * case no lookups are required
 *
 * Note that this method supports non-created nodes, whilst the taxonomy_node_get_terms_by_vocabulary() 
 * method does not.
 */
function headshift_tools_get_terms_in_vid($node, $vid) {
  $terms_in_vid = array();
  foreach ($node->taxonomy as $term)
  {
    if (!is_object($term))
    {
      // We just have a term id, get the object
      $term = taxonomy_get_term($term);
    }
    if ($term->vid == $vid) {
      $terms_in_vid[] = $term;
    }
  }
  return $terms_in_vid;
}

function theme_tag_item_list($tags) {
  // Convert the tag structure into one suitable for theme('item_list')
  $items = array();
  foreach($tags as $tag)
  {
    $items[] = $tag->name;
  }
  return theme('item_list', $items);
}

function headshift_tools_get_current_node() {
  $path_parts = arg();
  if ($path_parts[0] == "node" && is_numeric($path_parts[1]) && sizeof($path_parts == 2)) {
    return node_load($path_parts[1]);
  }
}

function headshift_tools_get_node_from_path($alias) {
  $internal_path = drupal_get_normal_path($alias);
  $path_parts = explode("/", $internal_path);
  if ($path_parts[0] == "node" && sizeof($path_parts == 2)) {
    return node_load($path_parts[1]);
  }
}

/**
 * Retrieves the themed terms associated with a node, with the urls rewritten to the correct location
 * according to the schema set in the urls array.
 *
 * @param <type> $node
 * @param array $urls An array of items indexed by vocabulary id in the following format:
 * array('url' => 'path/[name]', 'display' => TRUE)
 * [name] will be replaced with the name of the term, [tid] with the tid for that term. 
 * If display is set to false, then that vocabulary will not be returned
 * @return array indexed by vid of array of links to terms associated with the given node
 */
function headshift_tools_rewrite_terms(&$node, $urls = array()) {
  $nid = $node->nid;
  $node_version_id = $node->vid;
  $default_url = "taxonomy/[tid]";
  
  foreach($urls as $vid => $url) {
    if (!is_array($url)) {
      $urls[$vid]['url'] = $url;
    }
  }

  // TODO - Improve this sql to exclude vids where $urls[$vid]['display'] == false
  $sql = "SELECT
    v.vid,
    v.name vocabulary,
    tn.tid,
    td.name,
    td.weight
    FROM term_node tn
    LEFT JOIN term_data td on td.tid = tn.tid
    LEFT JOIN vocabulary v on v.vid = td.vid

    WHERE
    tn.nid = %d and
    tn.vid = %d

    ORDER BY td.weight,v.vid
    ";
  $result = db_query($sql, $nid, $node_version_id); 

  while ($data=db_fetch_array($result)) {
    $vid = $data['vid']; // create a shortcut, because this is used a lot

    // create rename tokens for each of the column names in the data
    foreach (array_keys($data) as $column_name) {
      $replace['['.$column_name.']'] = $data[$column_name];
    }
    $url_template = (is_array($urls) && $urls[$vid]['url']) ? $urls[$vid]['url'] : $default_url;
    $link = str_replace_assoc($replace, $url_template);
    if ($urls[$vid]['query']) {
      $query = str_replace_assoc($replace, $urls[$vid]['query']);
    }

    $class = 'vocabulary-' . $vid . ' term-' . $data['tid'];

    $options = array(
      'attributes' => array(
        'class' => $class,
        ),
      'query' => $query,
      );
    $links[$vid][] = l($data['name'], $link, $options);
  }
  return $links;
}
